import RSA
import rsa

def rsa_menu():
    choice = ''
    while (choice != '6'):
        print('1- Encrypt Message')
        print('2- Decrypt Message')
        print('3- Sign message')
        print('4- Verify Signature')
        print('5- Generate Keys')
        print('6- Back')
        choice = input("Enter choice\n> ")
        if (choice == '1'):
            encrypt_menu()
        if (choice == '2'):
            decrypt_menu()
        if (choice == '3'):
            sign_menu()
        if (choice == '4'):
            verify_menu()
        if (choice == '5'):
            RSA.generate_keys()


def load_public_key(path):
    try:
        with open(path, 'rb') as f:
            pubKey = rsa.PublicKey.load_pkcs1(f.read())
        return pubKey
    except:
        print("Key not found.")
    
def load_private_key(path):
    try:
        with open(path, 'rb') as f:
            privKey = rsa.PrivateKey.load_pkcs1(f.read())
        return privKey
    except:
        print("Key not found.")
    
def encrypt_menu():
    message = input("Enter message to encrypt:\n> ")
    key_path = input("Enter public key path:\n> ")
    pubKey = load_public_key(key_path)
    if (pubKey):
        encrypted_message = RSA.encrypt(message, pubKey)
        print("Encrypted Message: ", encrypted_message)
        file_path = input("Enter path to put encrypted message:\n> ")
        with open(file_path, 'wb') as f:
            f.write(encrypted_message)
    print('─' * 100)

def decrypt_menu():
    file_path = input("Enter file name to decrypt:\n> ")
    key_path = input("Enter private key path:\n> ")
    privKey = load_private_key(key_path)
    with open(file_path, 'rb') as f:
        enc_message = f.read()
    if (privKey):
        message = RSA.decrypt(enc_message, privKey)
        print("Decrypted Message: ", message)
    print('─' * 100)
    
def sign_menu():
    message = input("Enter encrypted message to sign:\n> ")
    key_path = input("Enter private key path:\n> ")
    signature_path = input("Enter path for signature file:\n> ")
    privKey = load_private_key(key_path)
    if (privKey):
        signature = RSA.sign_sha1(message, privKey)
        print("Signature: ", signature)
        with open(signature_path, 'wb') as f:
            f.write(signature)
    print('─' * 100)

def verify_menu():
    signature_path = input("Enter path to signature file:\n> ")
    message = input("Enter encrypted message to verify:\n> ")
    key_path = input("Enter public key path:\n> ")
    pubKey = load_public_key(key_path)
    with open(signature_path, 'rb') as f:
        signature = f.read()
    if RSA.verify_sha1(message, signature, pubKey):
        print('Signature verified!')
    else:
        print('Could not verify the message signature.')
    print('─' * 100)