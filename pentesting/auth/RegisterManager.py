import re
import secrets
import kerberos
import hashlib
import string
from pentesting.model.User import User
from getpass import getpass
import requests

from pentesting.auth.mail_sender import sendVerificationCode


def register():
    user = User()
    email_input = input("Enter email:\n> ")
    user_exists = check_existing_user(email_input)
    while (not check_valid_email(email_input) or user_exists):
        if (not check_valid_email(email_input)):
            print("Invalid email. Try again.")
        if (user_exists):
            print("e-mail already exists.")
        email_input = input("Enter e-mail address:\n> ")
        user_exists = check_existing_user(email_input)
    user.setEmail(email_input)

    firstname_input = input("Enter first name:\n> ")
    while (not checkname(firstname_input)):
        print("Invalid name")
        firstname_input = input("Enter first name:\n> ")
    user.setFirstName(firstname_input)

    lastname_input = input("Enter last name:\n> ")
    while (not checkname(lastname_input)):
        print("Invalid name. Try again.")
        lastname_input = input("Enter last name:\n> ")
    user.setLastName(lastname_input)
    
    pwd_input = getpass("Enter password:\n> ")
    pwd_retry_input = getpass("Enter password again:\n> ")
    while(not check_password_strength(pwd_input) or pwd_input != pwd_retry_input):
        if (not check_password_strength(pwd_input)):
            print("Password must: contain 1 uppercase character, 1 lowercase character, 1 number, be of minimum length of 8")
        if (pwd_input != pwd_retry_input):
            print("Passwords do not match.")
        pwd_input = getpass("Enter password:\n> ")
        pwd_retry_input = getpass("Enter password again:\n> ")
    hashed_passwd = hashlib.sha256(pwd_input.encode()).hexdigest()
    user.setHashedPasswd(hashed_passwd)
    print("Please wait...")
    code = sendVerificationCode(user)
    verif = input("Enter the 5-digit verification code sent to your account:\n>> ")
    while (verif != code):
        print("Invalid verification code.")
        verif = input("Enter the 5-digit verification code sent to your account:\n>> ")

    response = save_to_database(user)
    if (response.status_code == 201):
        print("User saved succesfully")
        return True, user
    else:
        print("User creation failed")
        return False, None


def check_valid_email(email):
    regex = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
    return re.fullmatch(regex, email)

def checkname(name):
    regex = re.compile(r'^[a-zA-Z]+$')
    return re.fullmatch(regex, name)

def check_password_strength(passwd):
    regex = re.compile(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,}$')
    return re.fullmatch(regex, passwd)

def check_existing_user(email):
    headers = get_headers()
    response = requests.post("http://service1.insat.tn:9998/check_email", headers=headers, json={"email": email})
    if (response.status_code == 409):
        return True
    return False

def save_to_database(user: User):
    user_to_insert = (
        user.firstname, 
        user.lastname, 
        user.email, 
        user.hashedpwd,
        )
    headers = get_headers()
    return requests.post("http://service1.insat.tn:9998/signup", headers=headers, json={
        "firstname": user_to_insert[0],
        "lastname":user_to_insert[1],
        "email":user_to_insert[2],
        "hashedpwd":user_to_insert[3],
        })

def generate_token():
    num = 8
    token = ''.join(secrets.choice(string.ascii_letters + string.digits) for x in range(num))  
    return token

def get_headers():
    headers = {}
    try:
        __, krb_context = kerberos.authGSSClientInit("host@service1.insat.tn")
        kerberos.authGSSClientStep(krb_context, "")
        negotiate_details = kerberos.authGSSClientResponse(krb_context)
    except:
        print("No credentials found for this user in this realm.")
        exit()
    headers = {"Authorization": "Negotiate " + negotiate_details}
    return headers