from getpass import getpass
import hashlib
import json
import re
import kerberos
import requests

from model.User import User
from auth.mail_sender import sendVerificationCode

  
def login():
    user = User()
    tries = 0
    email_input = ''
    pwd_input = ''
    valid_credentials = False
    while (not valid_credentials and tries < 3):
        email_input = input("Enter email:\n> ")
        while (not check_valid_email(email_input)):
            print("Invalid email. Try again.")
            email_input = input("Enter e-mail address:\n> ")
        user.setEmail(email_input)
        pwd_input = getpass("Enter password:\n> ")
        hashed_passwd = hashlib.sha256(pwd_input.encode()).hexdigest()
        user.setHashedPasswd(hashed_passwd)
        tries += 1
        valid_credentials, user = findUser(user)
        if (user and valid_credentials):
            print("Please wait...")
            code = sendVerificationCode(user)
            verif = input("Enter the 5-digit verification code sent to your account:\n>> ")
            while (verif != code):
                print("Invalid verification code.")
                verif = input("Enter the 5-digit verification code sent to your account:\n>> ")


    return valid_credentials or tries != 3, user

def check_valid_email(email):
    regex = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
    return re.fullmatch(regex, email)

def findUser(user: User):
    user_to_find = (
        user.email,
        user.hashedpwd
    )
    headers = get_headers()
    response = requests.post("http://service1.insat.tn:9998/login", headers=headers, json={
        "email":user_to_find[0],
        "hashedpwd":user_to_find[1],
        })
    user_found = json.loads(response.text)
    user.setFirstName(user_found["firstname"])
    user.setLastName(user_found["lastname"])
    return response.status_code == 200, user

def get_headers():
    __, krb_context = kerberos.authGSSClientInit("host@service1.insat.tn")
    kerberos.authGSSClientStep(krb_context, "")
    negotiate_details = kerberos.authGSSClientResponse(krb_context)
    headers = {"Authorization": "Negotiate " + negotiate_details}
    return headers

