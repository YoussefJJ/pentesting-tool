import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
from Crypto.Cipher import DES




def sym_menu():
    choice = ''
    while(choice != '3'):
        print("Symmetric Cipher")
        print("1- DES")
        print("2- AES256")
        print("3- Back")
        choice = input("> ")
        if (choice == "1"):
            des_algorithm()
        elif (choice == "2"):
            aes_algorithm()

def des_algorithm():
    choice = ''
    while(choice != '3'):
        print("1- Encrypt message")
        print("2- Decrypt message")
        print("3- Back")
        choice = input("> ")
        if (choice == "1"):
            key = input("Enter key (must be of length 8):\n> ")
            message = input("Enter message:\n> ")
            descipher = DESCipher(bytes(key.encode()))
            ciphertext = descipher.encrypt(bytes(message.encode()))
            print("The ciphertext: ", ciphertext.hex())
            filename = input("Enter where to save encrypted message:\n> ")
            with open(filename, 'wb') as f:
                f.write(ciphertext)
            print('-' * 100)
            continue
        if (choice == "2"):
            key = input("Enter key (must be of length 8):\n> ")
            filename = input("Enter encrypted file name:\n> ")
            with open(filename, 'rb') as f:
                enc_message = f.read()
            descipher = DESCipher(bytes(key.encode()))
            plaintext = descipher.decrypt(enc_message)
            print("The plaintext: ", plaintext)
            print('-' * 100)
            continue

def aes_algorithm():
    choice =''
    while(choice != '3'):
        print("1- Encrypt message")
        print("2- Decrypt message")
        print("3- Back")
        choice = input("> ")
        if (choice == "1"):
            key = input("Enter key :\n> ")
            message = input("Enter message:\n> ")
            aescipher = AESCipher(key)
            ciphertext = aescipher.encrypt(message)
            print("The ciphertext: ", ciphertext.decode())
            print('-' * 100)
            continue
        if (choice == "2"):
            key = input("Enter key :\n> ")
            enc_message = input("Enter encrypted message:\n> ")
            aescipher = AESCipher(key)
            plaintext = aescipher.decrypt(enc_message)
            print("The plaintext: ", plaintext)
            print('-' * 100)
            continue


class AESCipher(object):

    def __init__(self, key): 
        self.bs = AES.block_size
        self.key = hashlib.sha256(key.encode()).digest()

    def encrypt(self, raw):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw.encode()))

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')

    def _pad(self, s):
        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]

class DESCipher(object):
    
    def __init__(self, key):
        self.bs = DES.block_size
        self.key = key

    def encrypt(self, message):
        cipher = DES.new(self.key, DES.MODE_ECB)
        padded_message = self.pad(message)
        ciphertext = cipher.encrypt(padded_message)
        return ciphertext

    def decrypt(self, ciphertext):
        cipher = DES.new(self.key, DES.MODE_ECB)
        plaintext = cipher.decrypt(ciphertext)
        return plaintext.decode()
    
    def pad(self, message):
        while (len(message) % 8 != 0):
            message += b'\x00'
        return message
