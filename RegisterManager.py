import re
import sqlite3
import hashlib
from User import User
from getpass import getpass



class RegisterManager:
    def __init__(self):
        self.connection = sqlite3.connect("test_db.db")
        self.cursor = self.connection.cursor()
        self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        if (self.cursor.fetchone()[0] != 'USER'):
            self.cursor.execute("CREATE table USER(first_name VARCHAR2, last_name VARCHAR2, email VARCHAR2, pwd VARCHAR2)")

    def register(self):
        user = User()
        email_input = input("enter email:\n> ")
        user_exists = self.check_existing_user(email_input)
        while (not self.check_valid_email(email_input) and not user_exists):
            if (self.check_valid_email(email_input)):
                print("Invalid email. Try again.")
            if (user_exists):
                print("e-mail already exists.")
            email_input = input("Enter e-mail address:\n> ")
            user_exists = self.check_existing_user(email_input)
        user.setEmail(email_input)

        firstname_input = input("Enter first name:\n> ")
        while (not self.checkname(firstname_input)):
            print("Invalid name")
            firstname_input = input("Enter first name:\n> ")
        user.setFirstName(firstname_input)

        lastname_input = input("Enter last name:\n> ")
        while (not self.checkname(lastname_input)):
            print("Invalid name. Try again.")
            lastname_input = input("Enter last name:\n> ")
        user.setLastName(lastname_input)
        
        pwd_input = getpass("Enter password:\n> ")
        pwd_retry_input = getpass("Enter password again:\n> ")
        while(not self.check_password_strength(pwd_input) and pwd_input != pwd_retry_input):
            print("Password must: contain 1 uppercase character, 1 lowercase character, 1 number, be of minimum length of 8")
            if(pwd_input != pwd_retry_input):
                print("Passwords do not match.")
            pwd_input = getpass("Enter password:\n> ")
            pwd_retry_input = getpass("Enter password again:\n> ")
        hashed_passwd = hashlib.sha256(pwd_input.encode()).hexdigest()
        user.setHashedPasswd(hashed_passwd)

        self.save_to_database(user)

        return True


    def check_valid_email(self, email):
        regex = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
        return re.fullmatch(regex, email)
    
    def checkname(self, name):
        regex = re.compile(r'^[a-zA-Z]+$')
        return re.fullmatch(regex, name)

    def check_password_strength(self, passwd):
        regex = re.compile(r'^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}$')
        return re.fullmatch(regex, passwd)

    def check_existing_user(self, email):
        sql_query = 'SELECT * FROM user WHERE email=?'
        self.cursor.execute('SELECT * FROM user WHERE email=?',(email,))
        return self.cursor.fetchone() != []
    
    def save_to_database(self, user: User):
        sql_query = 'INSERT INTO user VALUES(?,?,?,?);'
        user_to_insert = (
            user.firstname, 
            user.lastname, 
            user.email, 
            user.hashedpwd
            )
        print(user_to_insert)
        # self.cursor.execute(sql_query, user_to_insert)
        # self.connection.commit()